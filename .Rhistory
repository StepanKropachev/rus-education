# View summary table
print(kable(summary_table))
install.packages("knitr")
y
# Install required packages
install.packages("tidyverse")
# Load libraries
library(tidyverse)
library(readxl)
library(writexl)
# Install required packages if you don't have them
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("readxl")) install.packages("readxl")
if (!require("openxlsx")) install.packages("openxlsx")  # using openxlsx instead of writexl
# Load libraries
library(tidyverse)
library(readxl)
library(openxlsx)
library(knitr)
# Read the Excel file
raw_data <- read_excel("Rus_Census_Labour_force_grouped_by_status_and_education.xlsx")
# Clean and reshape the data
cleaned_data <- raw_data %>%
# Remove empty columns
select_if(~!all(is.na(.) | . == "")) %>%
# Remove rows where first column is NA
filter(!is.na(.[[1]])) %>%
# Clean up column names
rename_with(~str_trim(str_replace_all(., "\n", " "))) %>%
# Remove rows that are just separators
filter(.[[1]] != "в том числе:") %>%
# Create hierarchical structure
mutate(
region_type = case_when(
str_detect(.[[1]], "федеральный округ") ~ "federal_district",
str_detect(.[[1]], "область|край|республика|автономный округ|город") ~ "region",
str_detect(.[[1]], "Городское|Сельское") ~ "settlement_type",
TRUE ~ "indicator"
)
)
# Reshape data to long format
long_data <- cleaned_data %>%
pivot_longer(
cols = contains(c("высшее", "среднее", "образование", "квалификации")),
names_to = "education_level",
values_to = "value"
) %>%
mutate(
education_type = case_when(
str_detect(education_level, "бакалавриат") ~ "bachelor",
str_detect(education_level, "магистратура") ~ "master",
str_detect(education_level, "специалитет") ~ "specialist",
str_detect(education_level, "среднее профессиональное") ~ "vocational",
str_detect(education_level, "квалифицированный рабочий") ~ "qualified_worker",
TRUE ~ "other"
)
)
View(cleaned_data)
View(raw_data)
View(cleaned_data)
load("C:/Users/kro-s/Desktop/Git Projects/rus-education/Rus_Census_Labour_force_grouped_by_status_and_education.xlsx")
library(readxl)
Rus_Census_Labour_force_grouped_by_status_and_education <- read_excel("Rus_Census_Labour_force_grouped_by_status_and_education.xlsx")
View(Rus_Census_Labour_force_grouped_by_status_and_education)
View(Rus_Census_Labour_force_grouped_by_status_and_education)
View(cleaned_data)
View(raw_data)
View(raw_data)
View(cleaned_data)
View(cleaned_data)
library(readxl)
library(tidyr)
library(dplyr)
# Read the Excel file
raw_data <- read_excel("Rus_Census_Labour_force_grouped_by_status_and_education.xlsx")
# Clean and transform data
cleaned_data <- raw_data %>%
# Remove empty rows and columns
filter(!is.na(across(everything()))) %>%
select_if(~!all(is.na(.))) %>%
# Create separate columns for regions and area types
mutate(
region = case_when(
grepl("федеральный округ|область|край|Республика|город", .[,1]) ~ .[,1],
TRUE ~ NA_character_
),
area_type = case_when(
grepl("население", .[,1]) ~ .[,1],
TRUE ~ NA_character_
)
) %>%
# Fill down region and area_type values
fill(region, area_type) %>%
# Create proper structure
pivot_longer(
cols = starts_with("имеющие"),
names_to = c("education_type", "education_subtype"),
names_pattern = "имеющие (.+) - (.+)",
values_to = "count"
) %>%
# Clean up categories
mutate(
population_category = case_when(
grepl("рабочая сила", .[,1]) ~ "Рабочая сила",
grepl("занятые", .[,1]) ~ "Занятые",
grepl("безработные", .[,1]) ~ "Безработные",
TRUE ~ "Общее население"
),
labour_status = case_when(
grepl("рабочая сила", .[,1]) ~ "В рабочей силе",
grepl("не входящие", .[,1]) ~ "Вне рабочей силы",
TRUE ~ NA_character_
)
) %>%
# Select and rename final columns
select(
region,
area_type,
population_category,
labour_status,
education_type,
education_subtype,
count
)
View(raw_data)
View(raw_data)
library(readxl)
library(tidyr)
library(dplyr)
library(stringr)
# Read the Excel file
raw_data <- read_excel("Rus_Census_Labour_force_grouped_by_status_and_education.xlsx")
# Function to identify row type
identify_row_type <- function(row_value) {
case_when(
grepl("федеральный округ|область|край|Республика|город", row_value) ~ "region",
grepl("население", row_value) ~ "area_type",
grepl("рабочая сила", row_value) ~ "labor_force",
grepl("занятые", row_value) ~ "employed",
grepl("безработные", row_value) ~ "unemployed",
TRUE ~ "other"
)
}
# Clean and transform data
cleaned_data <- raw_data %>%
# Remove completely empty rows
filter(!if_all(everything(), is.na)) %>%
# Add row type identifier
mutate(row_type = identify_row_type(.[,1])) %>%
# Create and fill region/area columns
mutate(
region = if_else(row_type == "region", .[,1], NA_character_),
area_type = if_else(row_type == "area_type", .[,1], NA_character_)
) %>%
fill(region, area_type) %>%
# Create status column
mutate(
labor_status = case_when(
row_type == "labor_force" ~ "Labor Force",
row_type == "employed" ~ "Employed",
row_type == "unemployed" ~ "Unemployed",
TRUE ~ NA_character_
)
) %>%
# Handle education columns
pivot_longer(
cols = matches("высшее|среднее|образование"),
names_to = "education_type",
values_to = "count"
) %>%
# Clean education types
mutate(
education_type = case_when(
grepl("высшее", education_type) ~ "Higher Education",
grepl("среднее проф", education_type) ~ "Vocational Education",
grepl("общее", education_type) ~ "General Education",
TRUE ~ education_type
)
) %>%
# Select final columns
select(
region,
area_type,
labor_status,
education_type,
count
) %>%
# Remove rows with NA in key columns
filter(!is.na(labor_status), !is.na(count))
View(identify_row_type)
View(raw_data)
library(readxl)
library(tidyr)
library(dplyr)
library(stringr)
# Read the Excel file
raw_data <- read_excel("Rus_Census_Labour_force_grouped_by_status_and_education.xlsx")
# First, let's see what we're working with
glimpse(raw_data)
cleaned_data <- raw_data %>%
# Remove completely empty rows
filter(!if_all(everything(), is.na)) %>%
# Add row type identifier
mutate(
row_type = case_when(
grepl("федеральный округ|область|край|Республика|город", `...1`) ~ "region",
grepl("население", `...1`) ~ "area_type",
grepl("рабочая сила", `...1`) ~ "labor_force",
grepl("занятые", `...1`) ~ "employed",
grepl("безработные", `...1`) ~ "unemployed",
TRUE ~ "other"
)
) %>%
# Create and fill region/area columns
mutate(
region = if_else(row_type == "region", `...1`, NA_character_),
area_type = if_else(row_type == "area_type", `...1`, NA_character_)
) %>%
fill(region, area_type)
View(raw_data)
# Load required libraries
library(tidyr)
library(dplyr)
library(readr)
library(stringr)
# Read the CSV file
# Note: Using skip=4 to drop the header rows, and setting sep=";" for semicolon-separated data
df <- read_delim("Rus_Census_Labour_force_grouped_by_status_and_education.csv",
delim = ";",
skip = 4,
col_names = FALSE,
locale = locale(encoding = "UTF-8"))
# Load required libraries
library(tidyr)
library(dplyr)
library(readr)
library(stringr)
df <- read_excel("Rus_Census_Labour_force_grouped_by_status_and_education.xlsx",
skip = 4)
# Create a mapping dictionary for Russian to English translations
area_type_dict <- c(
"Городское и сельское население" = "Total",
"Городское население" = "Urban",
"Сельское население" = "Rural"
)
labour_status_dict <- c(
"рабочая сила" = "Labour Force",
"занятые" = "Employed",
"безработные" = "Unemployed",
"не входящие в состав рабочей силы" = "Not in Labour Force",
"из них потенциальная рабочая сила" = "Potential Labour Force",
"не указавшие статус участия в составе рабочей силы" = "Labour Status Not Specified"
)
education_type_dict <- c(
"имеющие профессиональное" = "Professional",
"имеющие общее образование" = "General",
"не имеющие образования" = "No Education"
)
# Clean and reshape the data
clean_df <- df %>%
# Remove rows with 'в том числе:' and empty rows
filter(!str_detect(X1, "в том числе:"),
!is.na(X1),
X1 != "") %>%
# Create region column
mutate(region = case_when(
!X1 %in% area_type_dict &
!X1 %in% labour_status_dict &
!str_detect(X1, "указавшие") ~ X1,
TRUE ~ NA_character_
)) %>%
fill(region, .direction = "down") %>%
# Create area_type column
mutate(area_type = case_when(
X1 %in% names(area_type_dict) ~ area_type_dict[X1],
TRUE ~ NA_character_
)) %>%
fill(area_type, .direction = "down") %>%
# Create labour_status column
mutate(labour_status = case_when(
X1 %in% names(labour_status_dict) ~ labour_status_dict[X1],
TRUE ~ NA_character_
)) %>%
# Reshape the education columns
pivot_longer(cols = starts_with("X"),
names_to = "temp",
values_to = "count") %>%
# Remove rows where count is NA or empty
filter(!is.na(count),
count != "") %>%
# Create education type and subtype columns
mutate(
education_type = case_when(
str_detect(temp, "высшее") ~ "Higher",
str_detect(temp, "среднее профессиональное") ~ "Vocational",
str_detect(temp, "среднее") ~ "Secondary",
str_detect(temp, "основное") ~ "Basic",
str_detect(temp, "начальное") ~ "Primary",
TRUE ~ NA_character_
),
education_subtype = case_when(
str_detect(temp, "магистратура") ~ "Masters",
str_detect(temp, "специалитет") ~ "Specialist",
str_detect(temp, "бакалавриат") ~ "Bachelors",
TRUE ~ NA_character_
)
) %>%
# Select and arrange final columns
select(region, area_type, labour_status, education_type, education_subtype, count) %>%
# Remove any remaining rows with NA in key columns
filter(!is.na(region),
!is.na(area_type),
!is.na(labour_status))
View(df)
load("C:/Users/kro-s/Desktop/Git Projects/rus-education/Rus_Census_Labour_force_grouped_by_status_and_education.xlsx")
# Load required libraries
library(tidyr)
library(dplyr)
library(readr)
library(stringr)
# Note: Using skip=4 to drop the header rows, and setting sep=";" for semicolon-separated data
df <- read_excel("Rus_Census_Labour_force_grouped_by_status_and_education.xlsx",
skip = 4)
# Create a mapping dictionary for Russian to English translations
area_type_dict <- c(
"Городское и сельское население" = "Total",
"Городское население" = "Urban",
"Сельское население" = "Rural"
)
labour_status_dict <- c(
"рабочая сила" = "Labour Force",
"занятые" = "Employed",
"безработные" = "Unemployed",
"не входящие в состав рабочей силы" = "Not in Labour Force",
"из них потенциальная рабочая сила" = "Potential Labour Force",
"не указавшие статус участия в составе рабочей силы" = "Labour Status Not Specified"
)
education_type_dict <- c(
"имеющие профессиональное" = "Professional",
"имеющие общее образование" = "General",
"не имеющие образования" = "No Education"
)
# Clean and reshape the data
clean_df <- df %>%
# Remove rows with 'в том числе:' and empty rows
filter(!str_detect(X1, "в том числе:"),
!is.na(X1),
X1 != "") %>%
# Create region column
mutate(region = case_when(
!X1 %in% area_type_dict &
!X1 %in% labour_status_dict &
!str_detect(X1, "указавшие") ~ X1,
TRUE ~ NA_character_
)) %>%
fill(region, .direction = "down") %>%
# Create area_type column
mutate(area_type = case_when(
X1 %in% names(area_type_dict) ~ area_type_dict[X1],
TRUE ~ NA_character_
)) %>%
fill(area_type, .direction = "down") %>%
# Create labour_status column
mutate(labour_status = case_when(
X1 %in% names(labour_status_dict) ~ labour_status_dict[X1],
TRUE ~ NA_character_
)) %>%
# Reshape the education columns
pivot_longer(cols = starts_with("X"),
names_to = "temp",
values_to = "count") %>%
# Remove rows where count is NA or empty
filter(!is.na(count),
count != "") %>%
# Create education type and subtype columns
mutate(
education_type = case_when(
str_detect(temp, "высшее") ~ "Higher",
str_detect(temp, "среднее профессиональное") ~ "Vocational",
str_detect(temp, "среднее") ~ "Secondary",
str_detect(temp, "основное") ~ "Basic",
str_detect(temp, "начальное") ~ "Primary",
TRUE ~ NA_character_
),
education_subtype = case_when(
str_detect(temp, "магистратура") ~ "Masters",
str_detect(temp, "специалитет") ~ "Specialist",
str_detect(temp, "бакалавриат") ~ "Bachelors",
TRUE ~ NA_character_
)
) %>%
# Select and arrange final columns
select(region, area_type, labour_status, education_type, education_subtype, count) %>%
# Remove any remaining rows with NA in key columns
filter(!is.na(region),
!is.na(area_type),
!is.na(labour_status))
View(df)
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
# Read the Excel file with proper column names
df <- read_excel("Rus_Census_Labour_force_grouped_by_status_and_education.xlsx",
skip = 3,
col_names = c("region", "total_population", "education_specified",
"professional", "higher_total", "masters", "specialist",
"bachelors", "incomplete_higher", "vocational_total",
"vocational_specialist", "vocational_qualified",
"secondary", "basic", "primary_and_lower"))
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
# Read the Excel file with proper column names
df <- read_excel("Rus_Census_Labour_force_grouped_by_status_and_education.xlsx",
skip = 3,
col_names = c("region", "total_population", "education_specified",
"professional", "higher_total", "masters", "specialist",
"bachelors", "incomplete_higher", "vocational_total",
"vocational_specialist", "vocational_qualified",
"secondary", "basic", "primary_and_lower"))
library(readxl)
Rus_Census_Labour_force_grouped_by_status_and_education <- read_excel("Rus_Census_Labour_force_grouped_by_status_and_education.xlsx")
View(Rus_Census_Labour_force_grouped_by_status_and_education)
